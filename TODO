TODO
===========================================================================
- analysis
  - error: missing return statement
- code generation (vulkan,dummy)
  - c++ equivalent types (how to statically check offsets+alignment?)
  - graphics pipeline
    - create specialization config
    - what about fixed stage params?
    - assign (binding,location) to vertex inputs
    - assign (set,binding) to descriptor sets
    - generate vertex input attributes & binding info
    - emit GLSL code and compile into spirv arrays

Open Questions
===========================================================================
- how to deal with overloaded constructors for builtin types? e.g. vec4(vec3,float)
- how to report multiple errors when possible? Need better transformer for result type
- how to encode type invariants? (see https://discuss.ocaml.org/t/matching-incompatible-gadt-constructors/682/4)

How to optimize descriptor set allocation?
===========================================================================
def P(a: A, b: B, c: C) { ... }

def main(xs: atomset) {
  for x in xs {
    rt += P(a=x, b=x, c=x)
  }
}

Demo ideas
===========================================================================
- hello world triangle
- deferred
- culling (tiled deferred maybe?)
- many/different dynamic lights
- post effect (bloom, or motion blur)
- loaded model (Sponza?)

