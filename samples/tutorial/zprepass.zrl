module zprepass

pipeline PrePass(depth: depthBuffer, mvp: fmat4): float {

  def vertex(pos: fvec4) {
    builtin.position = mvp * pos
  }

  def fragment(): float {
    if builtin.fragCoord.z > depth.load(cast<ivec2>(builtin.fragCoord.xy)) {
      discard
    }
    return builtin.fragCoord.z
  }
}

pipeline MainPass(depth: depthBuffer, mvp: fmat4): fvec4 {

  def vertex(pos: fvec4) {
    builtin.position = mvp * pos
  }

  def fragment(): fvec4 {
    if builtin.fragCoord.z != depth.load(cast<ivec2>(builtin.fragCoord.xy)) {
      discard
    }
    val red = fvec4(1.0, 0.0, 0.0, 1.0)
    return red
  }
}

renderer Main(ds: rt_ds) {

  def main(view: atom, geometry: atomset) {
    ds = 1.0
    builtin.screen = fvec4(0.0, 0.0, 0.0, 1.0)
    for g in geometry {
      ds += PrePass(depth = ds, mvp = view, pos = g)
    }
    for g in geometry {
      builtin.screen += MainPass(depth = ds, mvp = view, pos = g)
    }
  }
}
